# requirements.txt
Flask==2.3.3
requests==2.31.0
beautifulsoup4==4.12.2
pandas==2.1.1
numpy==1.24.3
geopy==2.4.0
scikit-learn==1.3.0

---

# runtime.txt
python-3.9.18

---

# Procfile
web: python app.py

---

# .gitignore
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Database
*.db
*.sqlite3

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

---

# README.md
# Bouldering Route Recommender

An AI-powered web application that recommends outdoor bouldering routes based on your location, preferred grades, hold types, and approach distance preferences.

## Features

- üó∫Ô∏è **Location-based search**: Find routes near any location
- üìä **Smart recommendations**: AI-powered scoring based on your preferences
- üßó‚Äç‚ôÇÔ∏è **Grade filtering**: Filter by V-scale difficulty grades
- ‚úã **Hold type preferences**: Choose preferred hold types (jugs, crimps, slopers, etc.)
- üìè **Distance controls**: Set maximum approach distance and search radius
- üó∫Ô∏è **Interactive map**: View route locations on an interactive map
- üìà **Area statistics**: Get insights about climbing areas

## Quick Start

### Local Development

1. Clone the repository:
```bash
git clone https://github.com/yourusername/bouldering-recommender.git
cd bouldering-recommender
```

2. Install dependencies:
```bash
pip install -r requirements.txt
```

3. Run the application:
```bash
python app.py
```

4. Open your browser to `http://localhost:5000`

### Deploy to Heroku

1. Install the Heroku CLI
2. Login to Heroku: `heroku login`
3. Create a new app: `heroku create your-app-name`
4. Push to Heroku: `git push heroku main`

### Deploy to Render

1. Connect your GitHub repository to Render
2. Create a new Web Service
3. Use the following settings:
   - Build Command: `pip install -r requirements.txt`
   - Start Command: `python app.py`

## Usage

1. **Set Your Location**: Enter your coordinates